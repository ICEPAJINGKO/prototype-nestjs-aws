name: Deploy NestJS to AWS ECS (Fargate)

on:
    push:
        branches: [main]

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            # 1) ดึงโค้ด
            - name: Checkout code
              uses: actions/checkout@v4

            # 2) ตั้งค่า AWS Credentials (ดึงจาก GitHub Secrets)
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            # 3) Login เข้า Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            # 4) Build → Tag → Push Docker image
            - name: Build, tag, and push image to ECR
              run: |
                  IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
                  docker build -t $IMAGE_URI .
                  docker push $IMAGE_URI
              env:
                  DOCKER_BUILDKIT: 1

            # 5) Render task definition (แทนที่ image URI ให้ตรง tag)
            - name: Render new task definition
              id: render
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: task-definition.json # แม่แบบด้านล่าง
                  container-name: ${{ secrets.CONTAINER_NAME }}
                  image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

            # 6) Deploy ไป ECS Service
            - name: Deploy to Amazon ECS
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.render.outputs.task-definition }}
                  cluster: ${{ secrets.ECS_CLUSTER }}
                  service: ${{ secrets.ECS_SERVICE }}
                  wait-for-service-stability: true
